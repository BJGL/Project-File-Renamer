# -*- coding: utf-8 -*-
"""File Renamer

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VvvVT56cFncsNXay5NcRE7Gfj3nx8J6E
"""

import os
from datetime import datetime


def folder_name(path):
    """
    Extracts and returns the folder name from a given file path.

    Parameters:
        path (str): The full path to the folder.

    Returns:
        str: The name of the folder in uppercase, with leading and trailing spaces removed.

    Example:
        >>> folder_name("/Users/example/Documents/project")
        'PROJECT'
    """
    name = os.path.basename(path)
    name = name.strip().upper()
    return name


def NameCode(name):
    """
    Generates a code from the provided folder name by taking the letters
    in even positions (index starting from 0).

    Parameters:
        name (str): Folder name to generate the code from.

    Returns:
        str: A string of up to 4 characters formed by letters in even positions.

    Notes:
        - The resulting code will contain at most 4 characters.
        - Indexing starts at 0, so it includes the first character.

    Example:
        >>> NameCode("PROJECT")
        'POEJ'
    """
    code = ""
    for i in range(len(name)):
        if i % 2 == 0:
            code += name[i]
            if len(code) > 3:
                break

    return code


def saving_file_names(folder_path):
    """
    Retrieves all file names contained in a given folder.

    Parameters:
        folder_path (str): The path to the folder whose file names will be listed.

    Returns:
        list[str]: A list of file names found in the folder (excluding subdirectories).

    Example:
        >>> saving_file_names("C:/Users/Example/Documents")
        ['file1.txt', 'file2.csv', 'image.png']
    """
    file_names = os.listdir(folder_path)
    return file_names


def file_renamer(folder_path, code, original_names):
    """
    Renames each file in the folder using a generated code and a numeric suffix.

    Parameters:
        folder_path (str): Path to the target folder.
        code (str): The code prefix to use for renaming.
        original_names (list[str]): List of original file names.

    Returns:
        list[str]: List of new file names after renaming.

    Process:
        - Extracts each file's extension.
        - Builds a new name with the code and a counter (e.g., CODE_1.txt).
        - Renames the files in place using `os.rename`.
        - Collects and returns the list of new names.

    Example:
        >>> file_renamer("C:/folder", "PROJ", ["a.txt", "b.txt"])
        ['PROJ_1.txt', 'PROJ_2.txt']
    """
    new_names = []
    for i, name in enumerate(original_names):
        name_without_extension, extension = os.path.splitext(name)
        new_name = f"{code}_{i+1}{extension}"
        original_file_path = os.path.join(folder_path, name)
        new_file_path = os.path.join(folder_path, new_name)
        os.rename(original_file_path, new_file_path)
        new_names.append(new_name)

    return new_names


def catalogue(original_names, new_names):
    """
    Creates a .txt catalogue file listing original and new file names side by side.

    Each line contains: original_name<TAB>new_name (no header).

    Parameters:
        original_names (list[str]): List of original file names.
        new_names (list[str]): List of new file names (must match in length).

    Returns:
        str: The full path to the generated text file.

    Raises:
        ValueError: If the two lists have different lengths.

    Example:
        >>> catalogue(['a.txt', 'b.txt'], ['PROJ_1.txt', 'PROJ_2.txt'])
        'C:/Users/.../rename_catalogue_20251006.txt'
    """
    if len(original_names) != len(new_names):
        raise ValueError("original_names y new_names deben tener la misma longitud.")

    filename = f"rename_catalogue_{datetime.now().strftime('%Y%m%d')}.txt"
    out_path = os.path.join(os.getcwd(), filename)

    with open(out_path, "w", encoding="utf-8") as f:
        for o, n in zip(original_names, new_names):
            f.write(f"{o}\t{n}\n")

    return out_path


def main():
    """
    Main execution function of the script.

    Workflow:
        1. Prompts the user for a folder path.
        2. Extracts the folder name and generates a short code.
        3. Lists all file names in the folder.
        4. Renames each file using the generated code.
        5. Creates a catalogue text file mapping original and new names.

    Input:
        User provides the folder path via console input.

    Output:
        Prints:
            - The generated code.
            - The list of original file names.
            - The list of new file names.
            - The path to the generated catalogue file.

    Example:
        >>> main()
        Insert the path to the folder here: C:/Users/Example/Documents
        Generated code: DOCM
        the original filenames are: ['file1.txt', 'file2.txt']
        ['DOCM_1.txt', 'DOCM_2.txt']
    """
    folder_path_input = input('Insert the path to the folder here: ')
    name = folder_name(folder_path_input)
    code = NameCode(name)
    print(f"Generated code: {code}")
    print("\n")
    original_names = saving_file_names(folder_path_input)
    print(f"the original filenames are: {original_names}")
    print("\n")
    new_names = file_renamer(folder_path_input, code, original_names)
    print("\n")
    print(f'{new_names}')
    txtFile = catalogue(original_names, new_names)


main()